{
  "format_version": "1.13.0",
  "code:conditional_list": {
    "description": {
      "identifier": "badger:feature_forest_autumn_conditional_list"
    },
    "conditional_features": [
      {
        "places_feature": "badger:feature_forest_autumn_grass_weighted",
        "condition" : "temp.height = query.heightmap(variable.worldx, variable.worldz);\r\ntemp.noisevalue = query.noise((variable.worldx) / 40, (variable.worldz) / 40);\r\ntemp.noisewiggle = math.random(-1,1) *0.1;\r\nreturn ((temp.noisevalue > -1.0 && temp.noisevalue < -0.85 + temp.noisewiggle) || (temp.noisevalue > 0.85 + temp.noisewiggle && temp.noisevalue < 1.0) || (temp.noisevalue > -0.75 + temp.noisewiggle && temp.noisevalue < -0.55 + temp.noisewiggle) || (temp.noisevalue > 0.55 + temp.noisewiggle && temp.noisevalue < 0.75 + temp.noisewiggle) || (temp.noisevalue > 0.15 + temp.noisewiggle && temp.noisevalue < 0.35 + temp.noisewiggle) || (temp.noisevalue > -0.35 + temp.noisewiggle && temp.noisevalue < -0.15 + temp.noisewiggle));"
      },
      {
        "places_feature": "badger:feature_forest_autumn_driedstalks_shore_weighted",
        "condition" : "temp.height = query.heightmap(variable.worldx, variable.worldz);\r\ntemp.heightoffset = temp.height - query.sea_level > 1 ? 999 : 0;\r\ntemp.height = temp.height + temp.heightoffset;\r\ntemp.minscore = 0;\r\ntemp.waterdist = query.water_distance(variable.worldx, variable.worldz);\r\ntemp.waterscore = math.max(temp.minscore, 1- ((temp.waterdist -1) * 0.33));\r\nreturn math.random(0,100) < temp.waterscore * 100 && math.random(0,8) < 1;"
      }
    ],
	"early_out_scheme": "placement_success"
  }
}